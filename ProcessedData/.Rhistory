library(readxl)
library(tidyverse)
library(ggplot2)
install.packages("tidyverse")
library(readxl)
library(tidyverse)
library(ggplot2)
#Update path to where files are located
gcm<-read_excel("gcm_data_72h_prepared.xlsx")
gcm
gp1<-ggplot()+geom_line(data=sleepData, aes(x=timestamp,y=hr), color="red")
gp<-ggplot() + geom_line(data=gcm, aes(x=Timestamp, y=GlucoseLevel), color="blue")
gp
gp1<-ggplot()+geom_line(data=sleepData, aes(x=timestamp,y=hr), color="red")
sleepData<-read.csv("./../rawData/Sleep-2016-08-05--19.27-05.52-vitals.csv")
sleepData
sleepData$timestamp<-as.POSIXct(sleepData$timestamp, origin='1970-01-01')
sleepData
activity<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Activity")
sleepFitbit<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Sleep")
diet<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Diet")
library(readxl)
library(tidyverse)
library(ggplot2)
activity<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Activity")
sleepFitbit<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Sleep")
diet<- read_excel("fitbit_export_20160829_phase1_prepared.xlsx", sheet = "Diet")
gp<-ggplot() + geom_line(data=gcm, aes(x=Timestamp, y=GlucoseLevel), color="blue")
gp
gcm<-read_excel("gcm_data_72h_prepared.xlsx")
gp<-ggplot() + geom_line(data=gcm, aes(x=Timestamp, y=GlucoseLevel), color="blue")
gp
gp1<-ggplot()+geom_line(data=sleepData, aes(x=timestamp,y=hr), color="red")
gp1<-gp1+geom_line(data=sleepData, aes(x=timestamp,y=rr), color="blue")
gp1<-gp1+geom_line(data=sleepData, aes(x=timestamp,y=act), color="green")
gp1
sleepFitbit
activity
sleepData
activity
toy_data <- activity
gcm
dim(activity)
toy_data$gcm <- gcm$GlucoseLevel[10:20]
toy_data$gcm <- gcm$GlucoseLevel[10:19]
toy_data$gcm <- gcm$GlucoseLevel[11:19]
toy_data
colnames(toy_data)
a <- glm(toy_data, gcm ~ CaloriesBurnt * Steps )
a <- glm(toy_data,formula = gcm ~ CaloriesBurnt * Steps )
?glm
a <- glm(toy_data, family = gaussian,formula = gcm ~ CaloriesBurnt * Steps )
a
mr(a)
library(readxl)
library(tidyverse)
library(ggplot2)
?read_excel
gcm<-read_excel("./DataMosicAllData.xlsx", sheet = "GCM")
gcm
activity <- read_excel("./DataMosicAllData.xlsx", sheet = "Activity")
activity
sleep <- read_excel("./DataMosicAllData.xlsx", sheet = "Sleep")
sleep
diet <- read_excel("./DataMosicAllData.xlsx", sheet = "Diet")
injections <- read_excel("./DataMosicAllData.xlsx", sheet = "Injections")
injections
weather <- read_excel("./DataMosicAllData.xlsx", sheet = "Weather")
weather[1,]
str(weather[1,])
?as.POSIXct
as.POSIXct(weather[,2], tryFormats=c("%H:%M")
as.POSIXct(weather[,2], tryFormats=c("%H:%M")
)
as.POSIXct(weather[,2], tryFormats=c("%H:%M"))
weather[,2]
str(weather[,2])
format(as.POSIXct(weather,format='%m/%d/%Y %H:%M:%S'),format='%m/%d/%Y')
v <- format(as.POSIXct(weather,format='%Y-%m-%d %H:%M:%S'),format='%m/%d/%Y')
as.POSIXct(weather,format='%Y-%m-%d %H:%M:%S')
weather
v <- format(as.POSIXct(weather$Time,format='%Y-%m-%d %H:%M:%S'),format='%m/%d/%Y')
v
weather$Time <- format(as.POSIXct(weather$Time,format='%Y-%m-%d %H:%M:%S'),format='%H:%M')
weather
weather$Date <- format(as.POSIXct(weather$Date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
gcm
weather
within(weather, { timestamp=format(as.POSIXct(paste(Data, Time)), "%Y-%m-%d %H:%M:%S") })
format(as.POSIXct(paste(weather$Data, weather$Time)), "%Y-%m-%d %H:%M:%S")
weather
as.POSIXct(paste(weather$Data, weather$Time))
paste(weather$Data, weather$Time)
weather
format(as.POSIXct(paste(weather$Date, weather$Time)), "%Y-%m-%d %H:%M:%S")
weather$timestamp <- format(as.POSIXct(paste(weather$Date, weather$Time)), "%Y-%m-%d %H:%M:%S")
activity
gcm
### Assumed that we get the time series
##
##
dim(gcm)
### Assumed that we get the time series
##
##
data_set <- gcm
weather
?sample
data_set$Weather <- sample(weather$Weather, size = nrow(data_set), replace = TRUE)
injections
add_timestamp <- function(dt){
dt$Date <- format(as.POSIXct(dt$Date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
dt$Time <- format(as.POSIXct(dt$Time,format='%Y-%m-%d %H:%M:%S'),format='%H:%M')
dt$timestamp <- format(as.POSIXct(paste(dt$Date, dt$Time)), "%Y-%m-%d %H:%M:%S")
}
add_timestamp(weather)
add_timestamp <- function(dt){
dt$Date <- format(as.POSIXct(dt$Date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
dt$Time <- format(as.POSIXct(dt$Time,format='%Y-%m-%d %H:%M:%S'),format='%H:%M')
dt$timestamp <- format(as.POSIXct(paste(dt$Date, dt$Time)), "%Y-%m-%d %H:%M:%S")
}
add_timestamp(weather)
weather
add_timestamp <- function(dt){
dt$Date <- format(as.POSIXct(dt$Date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
dt$Time <- format(as.POSIXct(dt$Time,format='%Y-%m-%d %H:%M:%S'),format='%H:%M')
dt$timestamp <- format(as.POSIXct(paste(dt$Date, dt$Time)), "%Y-%m-%d %H:%M:%S")
}
add_timestamp(weather)
add_timestamp(injections)
add_timestamp(injections)
injections
add_timestamp(injections)
add_timestamp <- function(dt){
dt$Date <- format(as.POSIXct(dt$Date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
dt$Time <- format(as.POSIXct(dt$Time,format='%Y-%m-%d %H:%M:%S'),format='%H:%M')
dt$timestamp <- format(as.POSIXct(paste(dt$Date, dt$Time)), "%Y-%m-%d %H:%M:%S")
return(dt)
}
add_timestamp(injections)
injections <-  add_timestamp(injections)
weather <- add_timestamp(weather)
weather
injections <- add_timestamp(injections)
diet
diet <- add_timestamp(diet)
activity
activity <- add_timestamp(activity)
activity
tm <- c(gcm$Timestamp, weather$timestamp)
tm
weather$timestamp
is.na( weather$timestamp)
table(is.na(gcm$Timestamp))
c(gcm$Timestamp, weather$timestamp)
table(c(gcm$Timestamp, weather$timestamp))
table(is.na(c(gcm$Timestamp, weather$timestamp)))
c(gcm$Timestamp, weather$timestamp)
length(c(gcm$Timestamp, weather$timestamp))
length(unique(c(gcm$Timestamp, weather$timestamp)))
weather$timestamp
gcm$Timestamp
gcm
as.POSIXct(gcm$Timestamp,format='%Y-%m-%d %H:%M:%S')
str(gcm$timestamp)
str(gcm$Timestamp)
gcm$Timestamp$zone
gcm$Timestamp[1]$zone
as.character(gcm$Timestamp)
gcm$timestamp <- format(as.POSIXct(as.character(gcm$Timestamp),format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
c(gcm$timestamp, weather$timestamp)
gcm$timestamp <- as.POSIXct(as.character(gcm$Timestamp),format='%Y-%m-%d %H:%M:%S')
c(gcm$timestamp, weather$timestamp)
weather$timestamp
gcm$timestamp
strip.tz(gcm$timestamp)
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
tm
data_set <- data.frame(timestamp= tm. row.names = tm)
data_set <- data.frame(timestamp= tm, row.names = tm)
data_set[match(as.character(gcm$Timestamp), tm),] <- gcm$GlucoseLevel
data_set
### Assumed that we get the time series
##
##
data_set <- data.frame()
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm)
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = 0)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, weather = NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(gcm$Timestamp), tm)] <- weather$Weather
data_set
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, Weather = NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(gcm$Timestamp), tm)] <- weather$Weather
weather$Weather
data_set$Weather
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, Weather = NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(weather$timestamp), tm)] <- weather$Weather
extrapolat_data <- function(vect){
new_vect <- vect
current_value <- vect[which(!is.na(vect))[1]]
for(i in 1:length(vect)){
if(!is.na(vect[i])){current_value <- vect[i]}
new_vect[i] <- current_value
}
return(new_vect)
}
data_set$GlucoseLevel <- extrapolat_data(data_set$GlucoseLevel)
data_set$Weather <- extrapolat_data(data_set$Weather)
data_set
injections
diet
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, injections_Units =NA,  Weather = NA,
CaloriesProt = NA)
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, injections_Units =NA,  Weather = NA,
CaloriesProt = NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(weather$timestamp), tm)] <- weather$Weather
data_set$injections_Units[match(as.character(injections$Units), tm)] <- injections$Units
injections
injections$Units
match(as.character(injections$Units)
)
injections
injections$timestamp
as.character(injections$timestamp)
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, injections_Units =NA,  Weather = NA,
CaloriesProt = NA)
data_set$injections_Units[match(as.character(injections$Units), tm)] <- injections$Units
match(as.character(injections$Units), tm)
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, injections_Units =NA,  Weather = NA,
CaloriesProt = NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(weather$timestamp), tm)] <- weather$Weather
data_set$injections_Units[match(as.character(injections$timestamp), tm)] <- injections$Units
data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set$CaloriesProt <- extrapolat_data(data_set$CaloriesProt)
extrapolat_data <- function(vect){
new_vect <- vect
current_value <- vect[which(!is.na(vect))[1]]
for(i in 1:length(vect)){
if(!is.na(vect[i])){current_value <- vect[i]}
new_vect[i] <- current_value
}
return(new_vect)
}
data_set$GlucoseLevel <- extrapolat_data(data_set$GlucoseLevel)
data_set$Weather <- extrapolat_data(data_set$Weather)
data_set$injections_Units <- extrapolat_data(data_set$injections_Units)
data_set$CaloriesProt <- extrapolat_data(data_set$CaloriesProt)
data_set
?formula
?glm
### GLM modeling
#####################
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
glm_model
data_set
data_set$timestamp <- NULL
### GLM modeling
#####################
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
glm_model
summary(glm_model)
predict <- predict(glm_model, data_test, type = 'response')
### GLM modeling
#####################
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
data_set[,-1]
data_set[nrow(data_set),-1]
predict <- predict(glm_model, data_set[nrow(data_set),-1], type = 'response')
predict
diet
activity
colnames(activity)
#data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set["CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot"][match(as.character(diet$timestamp), tm)] <-
diet["CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot"]
#data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set[][match(as.character(diet$timestamp), tm), c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")] <-
diet[,c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")]
#data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set[match(as.character(diet$timestamp), tm), c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")] <-
diet[,c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")]
data_set[match(as.character(diet$timestamp), tm),c("CaloriesBurnt","Steps","Distance","Floors",
"MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity",
"ActivityCalories")] <-
diet[c("CaloriesBurnt","Steps","Distance","Floors","MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity","ActivityCalories")]
data_set
#data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set[match(as.character(diet$timestamp), tm), c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")] <-
diet[,c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")]
data_set[match(as.character(activity$timestamp), tm),c("CaloriesBurnt","Steps","Distance","Floors",
"MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity",
"ActivityCalories")] <-
activity[c("CaloriesBurnt","Steps","Distance","Floors","MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity","ActivityCalories")]
extrapolat_data <- function(vect){
new_vect <- vect
current_value <- vect[which(!is.na(vect))[1]]
for(i in 1:length(vect)){
if(!is.na(vect[i])){current_value <- vect[i]}
new_vect[i] <- current_value
}
return(new_vect)
}
colnames(data_set)
extrapolat_data <- function(vect){
new_vect <- vect
current_value <- vect[which(!is.na(vect))[1]]
for(i in 1:length(vect)){
if(!is.na(vect[i])){current_value <- vect[i]}
new_vect[i] <- current_value
}
return(new_vect)
}
data_set <- apply(data_set, 2, extrapolat_data)
### GLM modeling
#####################
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
data_set
tm <- unique(c(as.character(gcm$timestamp), as.character(weather$timestamp),
as.character(injections$timestamp), as.character(diet$timestamp)))
data_set <- data.frame(timestamp= tm, row.names = tm, GlucoseLevel = NA, injections_Units =NA,  Weather = NA,
CaloriesProt = NA, CaloriesCarbs = NA, CaloriesFat =NA,CaloriesTot= NA,
CaloriesBurnt=NA, Steps=NA, Distance=NA,Floors=NA,MinutesSitting=NA,MinutesLightActivity=NA,
MinutesRelativeHighActivity=NA,MinutesVeryHighActivity=NA,ActivityCalories=NA)
data_set$GlucoseLevel[match(as.character(gcm$Timestamp), tm)] <- gcm$GlucoseLevel
data_set$Weather[match(as.character(weather$timestamp), tm)] <- weather$Weather
data_set$injections_Units[match(as.character(injections$timestamp), tm)] <- injections$Units
#data_set$CaloriesProt[match(as.character(diet$timestamp), tm)] <- diet$CaloriesProt
data_set[match(as.character(diet$timestamp), tm), c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")] <-
diet[,c("CaloriesProt","CaloriesCarbs","CaloriesFat","CaloriesTot")]
data_set[match(as.character(activity$timestamp), tm),c("CaloriesBurnt","Steps","Distance","Floors",
"MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity",
"ActivityCalories")] <-
activity[c("CaloriesBurnt","Steps","Distance","Floors","MinutesSitting","MinutesLightActivity",
"MinutesRelativeHighActivity","MinutesVeryHighActivity","ActivityCalories")]
data_set
extrapolat_data <- function(vect){
new_vect <- vect
current_value <- vect[which(!is.na(vect))[1]]
for(i in 1:length(vect)){
if(!is.na(vect[i])){current_value <- vect[i]}
new_vect[i] <- current_value
}
return(new_vect)
}
apply(data_set, 2, extrapolat_data)
data_set
data_set$timestamp <- NULL
data_set
colnames(data_set)
data_set$timestamp <- NULL
colnames(data_set)
for(i in colnames(data_set)){
data_set[,i] <- extrapolat_data(data_set[,i])
}
data_set
### GLM modeling
#####################
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
summary(glm_model)
predict <- predict(glm_model, data_set[nrow(data_set),-1], type = 'response')
predict
write.csv(data_set, "./naive_extrapolated_data.csv")
### GLM modeling
#####################
data_set <- data_set[800:nrow(data_set),]
glm_model <-glm(GlucoseLevel ~ .,data = data_set, family = gaussian)
summary(glm_model)
predict <- predict(glm_model, data_set[nrow(data_set),-1], type = 'response')
predict
write.csv(data_set[nrow(data_set),-1], "template_question_data.csv")
question_data <- read.csv("question_data.csv", header = T)
question_data
data_set
question_data <- read.csv("question_data.csv", header = T, row.names = 1)
question_data
question_data <- read.csv("question_data.csv", header = T, row.names = 1)
predict <- predict(glm_model, question_data, type = 'response')
write.csv(predict, "./predicted_data.csv")
predict
str(predict)
names(predict) <- "GlucoseLevel"
predict
str(predict)
predict <- predict(glm_model, question_data, type = 'response')
data.frame(GlucoseLevel = predict)
write.csv(data.frame(GlucoseLevel = predict), "./predicted_data.csv")
